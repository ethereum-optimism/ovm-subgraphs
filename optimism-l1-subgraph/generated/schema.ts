// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SentMessage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SentMessage entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SentMessage entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SentMessage", id.toString(), this);
  }

  static load(id: string): SentMessage | null {
    return store.get("SentMessage", id) as SentMessage | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    return value.toI32();
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get message(): Bytes {
    let value = this.get("message");
    return value.toBytes();
  }

  set message(value: Bytes) {
    this.set("message", Value.fromBytes(value));
  }
}

export class RelayedMessage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RelayedMessage entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RelayedMessage entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RelayedMessage", id.toString(), this);
  }

  static load(id: string): RelayedMessage | null {
    return store.get("RelayedMessage", id) as RelayedMessage | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get msgHash(): string {
    let value = this.get("msgHash");
    return value.toString();
  }

  set msgHash(value: string) {
    this.set("msgHash", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    return value.toI32();
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }
}

export class MessageStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MessageStats entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MessageStats entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MessageStats", id.toString(), this);
  }

  static load(id: string): MessageStats | null {
    return store.get("MessageStats", id) as MessageStats | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sentMessageCount(): i32 {
    let value = this.get("sentMessageCount");
    return value.toI32();
  }

  set sentMessageCount(value: i32) {
    this.set("sentMessageCount", Value.fromI32(value));
  }

  get relayedMessageCount(): i32 {
    let value = this.get("relayedMessageCount");
    return value.toI32();
  }

  set relayedMessageCount(value: i32) {
    this.set("relayedMessageCount", Value.fromI32(value));
  }
}
